{"version":3,"file":"static/js/117.405f3b9f.chunk.js","mappings":"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","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\n// Validates the first half of an email address.\nconst validateText = (text) => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n  return re.test(text) || text.length === 0;\n};\n\nconst messages = [\n  'hi',\n  'hello',\n  'hola',\n  'you-can-email-me-at-literally-anything! Really',\n  'well, not anything. But most things',\n  'like-this',\n  'or-this',\n  'but not this :(  ',\n  'you.can.also.email.me.with.specific.topics.like',\n  'just-saying-hi',\n  'please-work-for-us',\n  'help',\n  'admin',\n  'or-I-really-like-your-website',\n  'thanks',\n];\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst EmailLink = ({ loopMessage, mail }) => {\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(0); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(() => {\n    let newIdx = idx;\n    let newChar = char;\n    if (char - hold >= messages[idx].length) {\n      newIdx += 1;\n      newChar = 0;\n    }\n    if (newIdx === messages.length) {\n      if (loopMessage) {\n        updateIter(0);\n        updateChar(0);\n      } else {\n        setIsActive(false);\n      }\n    } else {\n      updateMessage(messages[newIdx].slice(0, newChar));\n      updateIter(newIdx);\n      updateChar(newChar + 1);\n    }\n  }, isActive ? delay : null);\n\n  return (\n    <div\n      className=\"inline-container\"\n      style={validateText(message) ? {} : { color: 'red' }}\n      onMouseEnter={() => setIsActive(false)}\n      onMouseLeave={() => (idx < messages.length) && setIsActive(true)}\n    >\n      <a href={validateText(message) ? (`mailto:${mail}`) : ''} target=\"_top\" rel=\"noopener noreferrer\">\n        <span>{mail}</span>\n      </a>\n    </div>\n  );\n};\n\nEmailLink.defaultProps = {\n  loopMessage: false,\n};\n\nEmailLink.propTypes = {\n  loopMessage: PropTypes.bool,\n  mail: PropTypes.string.isRequired,\n};\n\nexport default EmailLink;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\nimport EmailLink from '../components/Contact/EmailLink';\nimport ContactIcons from '../components/Contact/ContactIcons';\n\nconst WeChatPart = () => (\n  <div className=\"email-at\">\n    <p>\n      By the way, I use <b>WeChat</b>. <br />\n      Send me an email if you prefer to use instant messaging :)\n    </p>\n  </div>\n);\n\nconst EmailPart = () => (\n  <div className=\"email-at\">\n    <p> <b>Feel free to get in touch!</b></p>\n    <p style={{ marginTop: '4%' }}>You can email me at: </p>\n    <EmailLink mail=\"lorenz [at] null [dot] net\" />\n    <p style={{ marginTop: '4%' }}>If it is for academic or professional purposes, preferably: </p>\n    <EmailLink mail=\"lorenz [at] cs [dot] toronto [dot] edu\" />\n    <EmailLink mail=\"zhaoxun [dot] liu [at] uhn [dot] ca\" />\n    <EmailLink mail=\"zhaoxun [dot] liu [at] mail [dot] utoronto [dot] ca\" />\n  </div>\n);\n\nconst Contact = () => (\n  <Main\n    title=\"Contact\"\n    description='Contact Zhaoxun \"Lorenz\" Liu'\n  >\n    <article className=\"post\" id=\"contact\">\n      <header>\n        <div className=\"title\">\n          <h2><Link to=\"/contact\">Contact</Link></h2>\n        </div>\n      </header>\n      <EmailPart />\n      <WeChatPart />\n      <ContactIcons />\n    </article>\n  </Main>\n);\n\nexport default Contact;\n"],"names":["validateText","text","test","length","messages","EmailLink","_ref","loopMessage","mail","idx","updateIter","useState","message","updateMessage","char","updateChar","isActive","setIsActive","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","newIdx","newChar","slice","_jsx","className","style","color","onMouseEnter","onMouseLeave","children","href","target","rel","defaultProps","WeChatPart","_jsxs","EmailPart","marginTop","Contact","Main","title","description","Link","to","ContactIcons"],"sourceRoot":""}